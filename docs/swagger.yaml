basePath: /
definitions:
  models.Pet:
    properties:
      Petid:
        type: integer
      age:
        type: integer
      color:
        type: string
      gender:
        type: string
      name:
        type: string
      species:
        type: string
      type:
        type: string
    required:
    - Petid
    - age
    - color
    - gender
    - name
    - species
    - type
    type: object
  models.User:
    properties:
      Email:
        type: string
      Password:
        type: string
      Userid:
        type: integer
      Username:
        type: string
    required:
    - Email
    - Password
    - Userid
    - Username
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Backend practika
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: PetShop by Roman
  version: "1.0"
paths:
  /pets:
    post:
      consumes:
      - application/json
      description: Create a new pet with the input payload
      parameters:
      - description: Pet information
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Pet'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Pet'
      summary: Create new pet
      tags:
      - pets
  /pets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete pet by ID
      parameters:
      - description: Pet ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete pet by ID
      tags:
      - pets
    get:
      consumes:
      - application/json
      description: Get pet information by ID
      parameters:
      - description: Pet ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Pet'
      summary: Get pet by ID
      tags:
      - pets
    put:
      consumes:
      - application/json
      description: Update pet information by ID
      parameters:
      - description: Pet ID
        in: path
        name: id
        required: true
        type: integer
      - description: Pet information
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/models.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Pet'
      summary: Update pet by ID
      tags:
      - pets
  /pets/filter:
    get:
      consumes:
      - application/json
      description: Filter pets by type, age, species, gender, and color
      operationId: filter-pets
      parameters:
      - description: Type of pet
        in: query
        name: type
        type: string
      - description: Age of pet
        in: query
        name: age
        type: integer
      - description: Species of pet
        in: query
        name: species
        type: string
      - description: Gender of pet
        in: query
        name: gender
        type: string
      - description: Color of pet
        in: query
        name: color
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Pet'
            type: array
      summary: Filter pets
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: SignUp
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user information by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Update user by ID
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login a user with the input payload
      parameters:
      - description: User information
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login a user
      tags:
      - users
  /users/logout:
    post:
      consumes:
      - application/json
      description: Logout a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logout a user
      tags:
      - users
swagger: "2.0"
